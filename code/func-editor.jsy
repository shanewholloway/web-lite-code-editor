import {CodeEditor} from './editor.jsy'


export class FuncCodeEditorBase extends CodeEditor ::
  constructor() ::
    super()

    this.compiler = this.createCompiler()
    this.dyn_proto = this._bindDynProto @ this, this.compiler

  createCompiler() ::
    return new DynFuncCompiler(this.transpile)

  _bindDynProto(host, compiler) ::
    return @{}
      compiler
      lazy() ::
        let ctx = host.as_compile_ctx(host)
        let dyn = compiler.compile_func(this.src_code, ctx)
        Object.assign(this, dyn)
        this.lazy = _=>this
        return this

      get dyn_fn() :: return this.lazy().fn
      get dyn_js() :: return this.lazy().js


  static get observedAttributes() ::
    return super.observedAttributes.concat @# 'name', 'func', 'args'

  get name() :: return this.getAttribute('name') || this.default_name || ''
  set name(value) :: this.setAttribute('name', value)

  get func() :: return this.getAttribute('func') || this.default_func || ''
  set func(value) :: this.setAttribute('func', value)

  get args() :: return this.getAttribute('args') || this.default_args || ''
  set args(value) :: this.setAttribute('args', value)

  get dual() :: return this.hasAttribute('dual')
  set dual(value) :: return value ? this.setAttribute('dual', '') : this.removeAttribute('dual')

  get debug() :: return this.hasAttribute('debug')
  set debug(value) :: return value ? this.setAttribute('debug', '') : this.removeAttribute('debug')


  as_compile_ctx({name, func, args}) ::
    return @{} name, func, args


  get dyn_fn() :: return this.dyn?.dyn_fn
  get dyn_js() :: return this.dyn?.dyn_js

  _event_from_state(state) ::
    return this.dyn = @{}
      __proto__: this.dyn_proto
      ... state

  refresh_code() ::
    let dyn = this.dyn.lazy()
    if dyn.err ::
      this.setAttribute('error', dyn.err)
    else this.removeAttribute('error')

    if ! this.dual ::
      this._el_dual = this._el_dual?.parentNode.remove()
      return

    this._el_dual ||= this._init_code_dom('dual')

    let src = this.debug ? ''+dyn.fn : dyn.js
    this.render_code @ 'js', src, this._el_dual, true


export default FuncCodeEditorBase


export class DynFuncCompiler ::
  constructor(fn_transpile=(src=>src)) ::
    this.transpile = fn_transpile

  compile_func(src_code, ctx) ::
    let res = {}
    try ::
      res.js = this.transpile(src_code)
    catch err ::
      res.err = err
      return res

    try ::
      let fn_compile = new Function @
        `return (${this.as_func_src(res.js, ctx)})`

      res.fn = fn_compile()
    catch err ::
      res.err = err
      return res

    return res

  as_func_src(js_src, {func, name, args}) ::
    if ! func.match(/\bfunction\b/) ::
      let [_,pre,post] = func.match(/^([^\*]*?)\s*(\*.*?)?\s*$/)
      func = `${pre||''} function ${post||''}`

    return `${func.trim()} ${name||''}(${args||''}) {\n${js_src}}`

