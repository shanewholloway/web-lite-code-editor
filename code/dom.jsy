import {relative_selection_ctxmgr} from './range_selection.jsy'
import {_create_async_queue} from './_refresh.jsy'
import {Undoer} from 'undoer/undoer.js'


export function code_editor_dom(host, el_code, state0, opt) ::
  _init_code_dom(el_code, opt)
  _init_editor_api(host, el_code, state0)

  const events = opt.events || code_editor_events
  const _on_evt = bind_evt_dispatch @ events, host, opt
  for const key of events.keys ::
    el_code.addEventListener @ key, _on_evt

  return @::
    for const key of events.keys ::
      el_code.removeEventListener @ key, _on_evt



export const code_editor_events = Object.freeze @:
  keys: Object.freeze @# 'keydown', 'keyup', 'paste', 'input'
  attrs: Object.freeze @# 'key'
  table: Object.freeze @:
    'evt:keydown,key:Tab'(evt, host, opt) ::
      evt.preventDefault()
      document.execCommand @ 'insertText', false, opt.tabs || '    '

    'evt:paste'(evt, host) ::
      evt.preventDefault()
      const text = evt.clipboardData.getData('text/plain')
      if text ::
        document.execCommand @ 'insertText', false, text
        host.dirty()

    'evt:input': bind_evt_editor_input()

export function bind_evt_dispatch(events, ... ex_args) ::
  const {table, attrs} = events
  return @\ evt ::
    const evec = @[] `evt:${evt.type}`, ... @
      attrs
        .map @ k => `${k}:${evt[k]}`
        .filter @ Boolean

    for let i=evec.length; i>0; i-- ::
      const fn = table[evec.slice(0,i)]
      if fn ::
        return fn(evt, ... ex_args)

export function bind_evt_editor_input() ::
  // specialized input event to work in concert with Undoer
  const wset = new WeakSet()
  return @\ evt, host ::
    if wset.has(host) ::
      return

    wset.add(host)
    try ::
      const src_code = host.src_code
      for const _ of host.with_selection() ::
        document.execCommand @ 'undo', false
        host.raw_src_code = src_code
        host.dirty()
    finally ::
      wset.delete(host)



export function _init_editor_api(host, el_code, state_tip) ::
  let _undoer = new Undoer @ _do_undo, state_tip
  function _do_undo(prev_state) ::
    const save = _undoer
    _undoer = null
    try :: host.restoreState(prev_state)
    finally :: _undoer = save


  const q_async = _create_async_queue()
  return Object.assign @ host, @{}
    *with_selection() ::
      for const _ of relative_selection_ctxmgr(el_code) ::
        yield

    dirty() ::
      q_async @ host.refresh

    refresh() ::
      for const _ of host.with_selection() ::
        host.src_code = host.src_code + ''

    _emit_src_code(el, new_state, shape=['lang', 'src_code']) ::
      if _state_equal(new_state, state_tip, shape) ::
        return

      state_tip = new_state
      if null !== _undoer ::
        _undoer.push @ new_state, el

      const evt = new CustomEvent @ 'src_code', @{}
        bubbles: true, detail: new_state

      ;(el || el_code).dispatchEvent(evt)


function _state_equal(a,b, shape) ::
  for const k of shape ::
    if a[k] !== b[k] ::
      return false
  return true


const _ed_attrs = @{}
  contentEditable: true
  spellcheck: false

const _ed_style = @{}
  outline: 'none'
  overflowWrap: 'break-word'
  overflowY: 'auto'
  resize: 'vertical'
  whiteSpace: 'pre-wrap'

export function _init_code_dom(el_code, opt) ::
  const attrs = {... _ed_attrs, ... opt.attrs || {}} 
  for const k in attrs ::
    el_code.setAttribute(k, attrs[k])

  Object.assign @ el_code.style,
    {... _ed_style, ... opt.style || {}}

